// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/audio_streaming.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AudioChunk struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	SampleRate           int32    `protobuf:"varint,2,opt,name=sample_rate,json=sampleRate" json:"sample_rate,omitempty"`
	SendFinished         bool     `protobuf:"varint,3,opt,name=send_finished,json=sendFinished" json:"send_finished,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AudioChunk) Reset()         { *m = AudioChunk{} }
func (m *AudioChunk) String() string { return proto.CompactTextString(m) }
func (*AudioChunk) ProtoMessage()    {}
func (*AudioChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_audio_streaming_c64a60bff1fccff8, []int{0}
}
func (m *AudioChunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AudioChunk.Unmarshal(m, b)
}
func (m *AudioChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AudioChunk.Marshal(b, m, deterministic)
}
func (dst *AudioChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AudioChunk.Merge(dst, src)
}
func (m *AudioChunk) XXX_Size() int {
	return xxx_messageInfo_AudioChunk.Size(m)
}
func (m *AudioChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_AudioChunk.DiscardUnknown(m)
}

var xxx_messageInfo_AudioChunk proto.InternalMessageInfo

func (m *AudioChunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AudioChunk) GetSampleRate() int32 {
	if m != nil {
		return m.SampleRate
	}
	return 0
}

func (m *AudioChunk) GetSendFinished() bool {
	if m != nil {
		return m.SendFinished
	}
	return false
}

type RecognitionResult struct {
	Result               string   `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Finished             bool     `protobuf:"varint,2,opt,name=finished" json:"finished,omitempty"`
	AsrTimeCost          int64    `protobuf:"varint,3,opt,name=asr_time_cost,json=asrTimeCost" json:"asr_time_cost,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecognitionResult) Reset()         { *m = RecognitionResult{} }
func (m *RecognitionResult) String() string { return proto.CompactTextString(m) }
func (*RecognitionResult) ProtoMessage()    {}
func (*RecognitionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_audio_streaming_c64a60bff1fccff8, []int{1}
}
func (m *RecognitionResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecognitionResult.Unmarshal(m, b)
}
func (m *RecognitionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecognitionResult.Marshal(b, m, deterministic)
}
func (dst *RecognitionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecognitionResult.Merge(dst, src)
}
func (m *RecognitionResult) XXX_Size() int {
	return xxx_messageInfo_RecognitionResult.Size(m)
}
func (m *RecognitionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RecognitionResult.DiscardUnknown(m)
}

var xxx_messageInfo_RecognitionResult proto.InternalMessageInfo

func (m *RecognitionResult) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *RecognitionResult) GetFinished() bool {
	if m != nil {
		return m.Finished
	}
	return false
}

func (m *RecognitionResult) GetAsrTimeCost() int64 {
	if m != nil {
		return m.AsrTimeCost
	}
	return 0
}

func init() {
	proto.RegisterType((*AudioChunk)(nil), "proto.AudioChunk")
	proto.RegisterType((*RecognitionResult)(nil), "proto.RecognitionResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AudioStreamService service

type AudioStreamServiceClient interface {
	StreamAudio(ctx context.Context, opts ...grpc.CallOption) (AudioStreamService_StreamAudioClient, error)
}

type audioStreamServiceClient struct {
	cc *grpc.ClientConn
}

func NewAudioStreamServiceClient(cc *grpc.ClientConn) AudioStreamServiceClient {
	return &audioStreamServiceClient{cc}
}

func (c *audioStreamServiceClient) StreamAudio(ctx context.Context, opts ...grpc.CallOption) (AudioStreamService_StreamAudioClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AudioStreamService_serviceDesc.Streams[0], c.cc, "/proto.AudioStreamService/StreamAudio", opts...)
	if err != nil {
		return nil, err
	}
	x := &audioStreamServiceStreamAudioClient{stream}
	return x, nil
}

type AudioStreamService_StreamAudioClient interface {
	Send(*AudioChunk) error
	Recv() (*RecognitionResult, error)
	grpc.ClientStream
}

type audioStreamServiceStreamAudioClient struct {
	grpc.ClientStream
}

func (x *audioStreamServiceStreamAudioClient) Send(m *AudioChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *audioStreamServiceStreamAudioClient) Recv() (*RecognitionResult, error) {
	m := new(RecognitionResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for AudioStreamService service

type AudioStreamServiceServer interface {
	StreamAudio(AudioStreamService_StreamAudioServer) error
}

func RegisterAudioStreamServiceServer(s *grpc.Server, srv AudioStreamServiceServer) {
	s.RegisterService(&_AudioStreamService_serviceDesc, srv)
}

func _AudioStreamService_StreamAudio_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AudioStreamServiceServer).StreamAudio(&audioStreamServiceStreamAudioServer{stream})
}

type AudioStreamService_StreamAudioServer interface {
	Send(*RecognitionResult) error
	Recv() (*AudioChunk, error)
	grpc.ServerStream
}

type audioStreamServiceStreamAudioServer struct {
	grpc.ServerStream
}

func (x *audioStreamServiceStreamAudioServer) Send(m *RecognitionResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *audioStreamServiceStreamAudioServer) Recv() (*AudioChunk, error) {
	m := new(AudioChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AudioStreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AudioStreamService",
	HandlerType: (*AudioStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAudio",
			Handler:       _AudioStreamService_StreamAudio_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/audio_streaming.proto",
}

func init() {
	proto.RegisterFile("proto/audio_streaming.proto", fileDescriptor_audio_streaming_c64a60bff1fccff8)
}

var fileDescriptor_audio_streaming_c64a60bff1fccff8 = []byte{
	// 247 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x31, 0x6f, 0xc2, 0x30,
	0x10, 0x85, 0x65, 0x28, 0x88, 0x5e, 0x60, 0xe0, 0x86, 0x2a, 0xa2, 0x43, 0xa3, 0x74, 0xc9, 0x44,
	0xab, 0x76, 0xaf, 0x54, 0x21, 0xf5, 0x07, 0x18, 0x76, 0xcb, 0x4d, 0x0e, 0xb0, 0x20, 0x36, 0xb2,
	0x2f, 0xfd, 0xfd, 0x15, 0x97, 0x88, 0x0e, 0x9d, 0x7c, 0xf7, 0x3d, 0xe9, 0x3d, 0xbf, 0x83, 0xc7,
	0x4b, 0x0c, 0x1c, 0x5e, 0x6c, 0xd7, 0xb8, 0x60, 0x12, 0x47, 0xb2, 0xad, 0xf3, 0x87, 0xb5, 0x50,
	0x9c, 0xc8, 0x53, 0xee, 0x01, 0x3e, 0xaf, 0xfa, 0xe6, 0xd8, 0xf9, 0x13, 0x22, 0xdc, 0x35, 0x96,
	0x6d, 0xae, 0x0a, 0x55, 0xcd, 0xb5, 0xcc, 0xf8, 0x04, 0x59, 0xb2, 0xed, 0xe5, 0x4c, 0x26, 0x5a,
	0xa6, 0x7c, 0x54, 0xa8, 0x6a, 0xa2, 0xa1, 0x47, 0xda, 0x32, 0xe1, 0x33, 0x2c, 0x12, 0xf9, 0xc6,
	0xec, 0x9d, 0x77, 0xe9, 0x48, 0x4d, 0x3e, 0x2e, 0x54, 0x35, 0xd3, 0xf3, 0x2b, 0xfc, 0x1a, 0x58,
	0x79, 0x82, 0xa5, 0xa6, 0x3a, 0x1c, 0xbc, 0x63, 0x17, 0xbc, 0xa6, 0xd4, 0x9d, 0x19, 0x1f, 0x60,
	0x1a, 0x65, 0x92, 0xc0, 0x7b, 0x3d, 0x6c, 0xb8, 0x82, 0xd9, 0xcd, 0x6c, 0x24, 0x66, 0xb7, 0x1d,
	0x4b, 0x58, 0xd8, 0x14, 0x0d, 0xbb, 0x96, 0x4c, 0x1d, 0x12, 0x4b, 0xda, 0x58, 0x67, 0x36, 0xc5,
	0x9d, 0x6b, 0x69, 0x13, 0x12, 0xbf, 0xed, 0x00, 0xa5, 0xd4, 0x56, 0x3a, 0x6f, 0x29, 0xfe, 0xb8,
	0x9a, 0xf0, 0x03, 0xb2, 0x1e, 0x88, 0x86, 0xcb, 0xfe, 0x10, 0xeb, 0xbf, 0xfa, 0xab, 0x7c, 0x40,
	0xff, 0x7e, 0x5a, 0xa9, 0x57, 0xf5, 0x3d, 0x15, 0xf1, 0xfd, 0x37, 0x00, 0x00, 0xff, 0xff, 0x9f,
	0x4a, 0x47, 0x54, 0x57, 0x01, 0x00, 0x00,
}
